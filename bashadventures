#! /bin/bash
# Bash Adventures, a text based adventure game.

set -o pipefail -o errexit

title_animation() {
  for (( LINES=5; LINES>0; LINES-- )); do
    printf "\033c"
    eval printf "%.0s$'\n'" "{0..$LINES}"
    printf "%s" "${SWORD_IMAGE:=$(< images/sword)}"
    ! read -r -t .2
  done
  ! read -r -t 0.1 -n 1000
}

function not_done {
  printf "\033c"
  printf "%s\n" "${SWORD_IMAGE:=$(< images/sword)}"
  printf "                        \033[1;31mThis feature is not"
  printf "                        currently implemented"
  printf "                        press enter to go"
  printf "                        back to the menu.\033[0m"
  read -r -s _
}

quit_prompt() {
  printf "\033c"
  printf "%s\n" "${DISPLAY}" | \
  sed -re '12 s/^(.{19}).{23}(.*)/\1\┌─────────────────────┐\2/' \
       -e '13 s/^(.{19}).{23}(.*)/\1\│    Are you sure     │\2/' \
       -e '14 s/^(.{19}).{23}(.*)/\1\│ want to quit? (y|n) │\2/' \
       -e '15 s/^(.{19}).{23}(.*)/\1\└─────────────────────┘\2/'
  read -r -s -n 1 QUIT
  if [[ "${QUIT}" = 'y' ]]; then
    main_menu
  fi
}

movement() {
  local XCORD="${1}" YCORD="${2}"
  local KEY_PRESSED NEW_XCORD NEW_YCORD QUIT
  ! read -r -s -n 1 KEY_PRESSED
  if [[ "${KEY_PRESSED}" ]]; then
    case "${KEY_PRESSED}" in
      a|D)
        NEW_XCORD="$((XCORD - 1))"
        NEW_YCORD="${YCORD}";;
      w|A)
        NEW_XCORD="${XCORD}"
        NEW_YCORD="$((YCORD - 1))";;
      s|B)
        NEW_XCORD="${XCORD}"
        NEW_YCORD="$((YCORD + 1))";;
      d|C)
        NEW_XCORD="$((XCORD + 1))"
        NEW_YCORD="${YCORD}";;
      q)
        QUIT='y'
        NEW_XCORD="${XCORD}"
        NEW_YCORD="${YCORD}";;
      *)
        NEW_XCORD="${XCORD}"
        NEW_YCORD="${YCORD}";;
    esac
  else
    NEW_XCORD="${XCORD}"
    NEW_YCORD="${YCORD}"
  fi
  printf "%s %s %s" "${NEW_XCORD}" "${NEW_YCORD}" "${QUIT}"
}

function spider_no_weapon {
  printf "\033c"
  printf "%s\n" "${SPIDER_IMAGE:=$(< images/spider)}"
  printf "You see a large and very dangerous looking spider.\n"
  printf "Without a weapon you dare not get any closer.\n"
  read -r -s _
}

function cave_cliff {
  printf "\033c"
  printf "%s\n" "${CAVE_CLIFF_IMAGE:=$(< images/cave_cliff)}"
  printf "\n\nThis cliff is too high for you to reach the ledge.\n"
  printf "Maybe there is another way out.\n"
  read -r -s _
}

forest_trail_cave_night_1_move() {
  printf "\033c"
  sed -i s/.*save.*/"save forest_trail_cave_night_1 $XCORD $YCORD"/g "${SAVES}/${NAME}"
  Y=${YCORD:=23}
  X=$((${XCORD:=25} - 3))
  DISPLAY="$(printf "%s\n" "${MAP}" | \
  sed -re "$((Y - 2)) s/^(.{${X}})(.*)/\1${MAP_HIDDEN[$((Y - 3))]:${X}:7}\2/" \
     -e "$((Y - 1)) s/^(.{${X}})(.*)/\1${MAP_HIDDEN[$((Y - 2))]:${X}:7}\2/" \
     -e "${Y}       s/^(.{${X}})(.*)/\1${MAP_HIDDEN[$((Y - 1))]:${X}:3}\@${MAP_HIDDEN[$((Y - 1))]:$((X + 4)):3}\2/" \
     -e "$((Y + 1)) s/^(.{${X}})(.*)/\1${MAP_HIDDEN[$Y]:${X}:7}\2/" \
     -e "$((Y + 2)) s/^(.{${X}})(.*)/\1${MAP_HIDDEN[$((Y + 1))]:${X}:7}\2/")"
  printf "%s\n\n" "${DISPLAY}"
  printf "YCord: %s\n" "${YCORD}" #debug
  printf "XCord: %s\n" "${XCORD}" #debug
  local NEW_XCORD NEW_YCORD QUIT
  # shellcheck disable=SC2046
  read -r NEW_XCORD NEW_YCORD QUIT <<< $(movement "${XCORD}" "${YCORD}")
  if [[ "${QUIT}" == 'y' ]]; then
    quit_prompt
  fi
  NEW_LOC="${MAP_TERRIAN[$((NEW_YCORD - 1))]:$NEW_XCORD:1}"
  case "${NEW_LOC}" in
    ' ')
      XCORD="${NEW_XCORD}"
      YCORD="${NEW_YCORD}";;
    '┬')
      cave_cliff;;
    'ж')
      spider_no_weapon;;
  esac
  forest_trail_cave_night_1_move
}

function forest_trail_sign {
  printf "\033c"
  printf "%s\n" "${FOREST_TRAIL_SIGN_IMAGE:=$(< images/forest_trail_sign)}"
  read -r -s _
}

function forest_trail_night_1_move {
  printf "\033c"
  sed -i s/.*save.*/"save forest_trail_night_1 $XCORD $YCORD"/g "${SAVES}/${NAME}"
  DISPLAY="$(printf "%s\n" "${MAP}" |\
  sed -re "$YCORD s/^(.{$XCORD}).(.*)/\1\@\2/" \
     -e "10 s/^(.{43}).(.*)/\1\ж\2/" \
     -e "4 s/^(.{48}).(.*)/\1\ж\2/" \
     -e "5 s/^(.{13}).(.*)/\1\ж\2/" \
     -e "12 s/^(.{26}).(.*)/\1\ж\2/")"
  printf "%s\n\n" "${DISPLAY}"
  printf "YCord: %s\n" "${YCORD}" #debug
  printf "XCord: %s\n" "${XCORD}" #debug
  local NEW_XCORD NEW_YCORD QUIT
  # shellcheck disable=SC2046
  read -r NEW_XCORD NEW_YCORD QUIT <<< $(movement "${XCORD}" "${YCORD}")
  if [[ "${QUIT}" == 'y' ]]; then
    quit_prompt
  fi
  NEW_LOC="${MAP_TERRIAN[$((NEW_YCORD - 1))]:$NEW_XCORD:1}"
  case $NEW_LOC in
  ' ')
    XCORD=$NEW_XCORD
    YCORD=$NEW_YCORD;;
  'ф')
    forest_trail_sign;;
  'ж')
    spider_no_weapon;;
  'Ʌ')
    YCORD=23
    XCORD=25
    MAP="${FOREST_TRAIL_CAVE_NIGHT_1_MAP:=$(< places/forest_trail_cave_night_1_map)}"
    readarray MAP_HIDDEN < places/forest_trail_cave_night_1_hidden
    readarray MAP_TERRIAN < places/forest_trail_cave_night_1_terrian
    forest_trail_cave_night_1_move;;
  '<')
    YCORD=19
    XCORD=57
    MAP="${BROOKSHIRE_NIGHT_1_MAP:=$(< places/brookshire_night_1_map)}"
    readarray MAP_TERRIAN < places/brookshire_night_1_terrian
    brookshire_night_1_move;;
  esac
  forest_trail_night_1_move
}

brookshire_night_watch_block_west() {
  PLACES=$((15 - NEW_YCORD))
  for (( PLACE=1; PLACE<=PLACES; PLACE++ )); do
    printf "\033c"
    NEW_GUARD_PLACE=$((15 - PLACE))
    DISPLAY="$(printf "%s\n" "${MAP}" |\
    sed -re "$YCORD s/^(.{$XCORD}).(.*)/\1\@\2/" \
         -e "2 s/^(.{27}).(.*)/\1\£\2/" \
         -e  "${NEW_GUARD_PLACE} s/^(.{1}).(.*)/\1\£\2/" \
         -e "20 s/^(.{57}).(.*)/\1\£\2/")"
    printf "%s\n\n" "${DISPLAY}"
    printf "YCord: %s\n" "${YCORD}" #debug
    printf "XCord: %s\n" "${XCORD}" #debug
    ! read -r -t .5
  done
  printf "\033c"
  printf "%s\n" "${NIGHT_WATCH_IMAGE:=$(< images/night_watch)}"
  printf "Night Watchman: \"Sorry, kid, no body leaves the village after dark.\"\n"
  read -r -s _
  for (( PLACE=PLACES; PLACE>=1; PLACE-- )); do
    printf "\033c"
    NEW_GUARD_PLACE=$((15 - PLACE))
    DISPLAY="$(printf "%s\n" "${MAP}" |\
    sed -re "$YCORD s/^(.{$XCORD}).(.*)/\1\@\2/" \
         -e "2 s/^(.{27}).(.*)/\1\£\2/" \
         -e "${NEW_GUARD_PLACE} s/^(.{1}).(.*)/\1\£\2/" \
         -e "20 s/^(.{57}).(.*)/\1\£\2/")"
    printf "%s\n\n" "${DISPLAY}"
    printf "YCord: %s\n" "${YCORD}" #debug
    printf "XCord: %s\n" "${XCORD}" #debug
    ! read -r -t .5
  done
  ! read -r -t 0.00001 -n 1000
}

brookshire_night_watch_block_north() {
  PLACES=$((NEW_XCORD - 27))
  for (( PLACE=1; PLACE<=PLACES; PLACE++ )); do
    printf "\033c"
    NEW_GUARD_PLACE=$((PLACE + 27))
    DISPLAY="$(printf "%s\n" "${MAP}" |\
    sed -re "$YCORD s/^(.{$XCORD}).(.*)/\1\@\2/" \
         -e "2 s/^(.{$NEW_GUARD_PLACE}).(.*)/\1\£\2/" \
         -e "15 s/^(.{1}).(.*)/\1\£\2/" \
         -e "20 s/^(.{57}).(.*)/\1\£\2/")"
    printf "%s\n\n" "${DISPLAY}"
    printf "YCord: %s\n" "${YCORD}" #debug
    printf "XCord: %s\n" "${XCORD}" #debug
    ! read -r -t .5
  done
  printf "\033c"
  printf "%s\n" "${NIGHT_WATCH_IMAGE:=$(< images/night_watch)}"
  printf "Night Watchman: \"Sorry, kid, no body leaves the village after dark.\"\n"
  read -r -s _
  for (( PLACE=PLACES; PLACE>=1; PLACE-- )); do
    printf "\033c"
    NEW_GUARD_PLACE=$((PLACE + 27))
    DISPLAY="$(printf "%s\n" "${MAP}" |\
    sed -re "$YCORD s/^(.{$XCORD}).(.*)/\1\@\2/" \
         -e "2 s/^(.{$NEW_GUARD_PLACE}).(.*)/\1\£\2/" \
         -e "15 s/^(.{1}).(.*)/\1\£\2/" \
         -e "20 s/^(.{57}).(.*)/\1\£\2/")"
    printf "%s\n\n" "${DISPLAY}"
    printf "YCord: %s\n" "${YCORD}" #debug
    printf "XCord: %s\n" "${XCORD}" #debug
    ! read -r -t .5
  done
  ! read -r -t 0.00001 -n 1000
}

brookshire_sign_north() {
  printf "\033c"
  printf "%s\n" "${BROOKSHIRE_SIGN_NORTH_IMAGE:=$(< images/brookshire_sign_north)}"
  read -r -s _
}

brookshire_sign_west() {
  printf "\033c"
  printf "%s\n" "${BROOKSHIRE_SIGN_WEST_IMAGE:=$(< images/brookshire_sign_west)}"
  read -r -s _
}

brookshire_sign_east() {
  printf "\033c"
  printf "%s\n" "${BROOKSHIRE_SIGN_EAST_IMAGE:=$(< images/brookshire_sign_east)}"
  read -r -s _
}

brookshire_sign_market() {
  printf "\033c"
  printf "%s\n" "${BROOKSHIRE_SIGN_MARKET_IMAGE:=$(< images/brookshire_sign_market)}"
  read -r -s _
}

brookshire_sign_temple() {
  printf "\033c"
  prinf "%s\n" "${BROOKSHIRE_SIGN_TEMPLE_IMAGE:=$(< images/brookshire_sign_temple)}"
  read -r -s _
}

house_night_1() {
  printf "\033c"
  printf "%s\n" "${BROOKSHIRE_HOUSE_NIGHT_1_IMAGE:=$(< images/brookshire_house_night_1)}"
  printf "The door is locked and the lights are out. Come back in the morning.\n"
  read -r -s _
}

house_night_2() {
  printf "\033c"
  printf "%s\n" "${BROOKSHIRE_HOUSE_NIGHT_2_IMAGE:=$(< images/brookshire_house_night_2)}"
  printf "The door is locked and the lights are out. Come back in the morning.\n"
  read -r -s _
}

temple_night() {
  printf "\033c"
  printf "%s\n" "${TEMPLE_NIGHT_IMAGE:=$(< images/temple_night)}"
  printf "The temple is closed at night. Solace must be found elsewhere.\n"
  read -r -s _
}

brookshire_guard_tower_night_1() {
  printf "\033c"
  printf "%s\n" "${BROOKSHIRE_GUARD_TOWER_IMAGE:=$(< images/guard_tower)}"
  printf "The door is locked --\n"
  printf "and on second thought is going into the guard tower really a good idea?\n"
  read -r -s _
}

brookshire_barn_door_night_1() {
  printf "\033c"
  printf "%s\n" "${BROOKSHIRE_BARN_NIGHT_IMAGE:=$(< images/barn_night)}"
  printf "Probably not a good idea to go back in there.\n"
  read -r -s _
}

brookshire_night_1_move() {
  printf "\033c"
  sed -i s/.*save.*/"save brookshire_night_1 $XCORD $YCORD"/g "${SAVES}/${NAME}"
  NORTH_GUARD_LOC=27
  DISPLAY="$(printf "%s\n" "${MAP}" |\
  sed -re "$YCORD s/^(.{$XCORD}).(.*)/\1\@\2/" \
     -e "2 s/^(.{$NORTH_GUARD_LOC}).(.*)/\1\£\2/" \
     -e "15 s/^(.{1}).(.*)/\1\£\2/" \
     -e "20 s/^(.{57}).(.*)/\1\£\2/")"
  #display_box
  printf "%s\n\n" "${DISPLAY}"
  printf "YCord: %s\n" "${YCORD}" #debug
  printf "XCord: %s\n" "${XCORD}" #debug
  local NEW_XCORD NEW_YCORD QUIT
  # shellcheck disable=SC2046
  read -r NEW_XCORD NEW_YCORD QUIT <<< $(movement "${XCORD}" "${YCORD}")
  if [[ "${QUIT}" == 'y' ]]; then
    quit_prompt
  fi
  NEW_LOC="${MAP_TERRIAN[$((NEW_YCORD - 1))]:$NEW_XCORD:1}"
  case $NEW_LOC in
    ' ')
      XCORD=${NEW_XCORD:=XCORD}
      YCORD=${NEW_YCORD:=YCORD};;
    'F')
      brookshire_barn_door_night_1;;
    'e')
      YCORD=10
      XCORD=2
      MAP="${FOREST_TRAIL_TRAIL_NIGHT_1_MAP:=$(< places/forest_trail_night_1_map)}"
      readarray MAP_TERRIAN < places/forest_trail_night_1_terrian
      forest_trail_night_1_move;;
    'G')
      printf "\033c"
      printf "%s\n" "${NIGHT_WATCH_IMAGE:=$(< images/night_watch)}"
      printf "Night Watchman: \"Quit bugging me and go home, kid.\"\n"
      read -r -s _;;
    'c')
      brookshire_sign_temple;;
    'C')
      temple_night;;
    'T')
      brookshire_guard_tower_night_1;;
    'E')
      printf "\033c"
      printf "%s\n" "${NIGHT_WATCH_SLEEPING_IMAGE:=$(< images/night_watch_sleeping)}"
      printf "You find a guard sleeping at his post.\n"
      read -r -s _;;
    'w')
      brookshire_night_watch_block_west;;
    'n')
      brookshire_night_watch_block_north;;
    'N')
      brookshire_sign_north;;
    'W')
      brookshire_sign_west;;
    'S')
      brookshire_sign_east;;
    'M')
      brookshire_sign_market;;
    '1')
      house_night_1;;
    '2')
      house_night_2;;
  esac
  brookshire_night_1_move
}

function brookshire_night_1_intro {
  YCORD=23
  XCORD=21
  printf "\033c"
  printf "%s\n" "${BROOKSHIRE_BARN_NIGHT_IMAGE:=$(< images/barn_night)}"
  printf "\n\nYou can hear the stable master coming.\n"
  printf "Better find somewhere to hide\!\n\n"
  printf "  Press enter to continue.\n"
  read -r -s _
  MAP="${BROOKSHIRE_NIGHT_1_MAP:=$(< places/brookshire_night_1_map)}"
  readarray MAP_TERRIAN < places/brookshire_night_1_terrian
  brookshire_night_1_move
}

function grumpy_stable_master {
  printf "\033c"
  printf "%s\n" "${GRUMPY_STABLE_MASTER_IMAGE:=$(< images/grumpy_stable_master)}"
  printf "Grumpy Stable Master: \"Stop moving so fast, boy\!\"\n"
  read -r -s -n 1 _
}

function angry_cow {
  printf "\033c"
  printf "%s\n" "${ANGRY_COW_IMAGE:=$(< images/cow)}"
  read -r -s -n 1 _
}

function stable_night_1_move {
  printf "\033c"
  sed -i s/.*save.*/"save stable_night_1 $XCORD $YCORD"/g "${SAVES}/${NAME}"
  DISPLAY="$(printf "%s\n" "${MAP}" |\
  sed -re "$YCORD s/^(.{$XCORD}).(.*)/\1\@\2/" \
       -e '7s/^(.{22}).(.*)/\1\&\2/')"
  printf "%s\n\n" "${DISPLAY}"
  printf "Quick\! Run out of the stable and get away from the stable master\!\n"
  printf "YCord: %s\n" "${YCORD}" #debug
  printf "XCord: %s\n" "${XCORD}" #debug
  local NEW_XCORD NEW_YCORD QUIT
  # shellcheck disable=SC2046
  read -r NEW_XCORD NEW_YCORD QUIT <<< $(movement "${XCORD}" "${YCORD}")
  if [[ "${QUIT}" == 'y' ]]; then
    quit_prompt
  fi
  NEW_LOC="${MAP_TERRIAN[$((NEW_YCORD - 1))]:$NEW_XCORD:1}"
  case $NEW_LOC in
    ' ')
      XCORD=${NEW_XCORD:=XCORD}
      YCORD=${NEW_YCORD:=YCORD};;
    '0')
      if [[ "${NEW_XCORD}" -le "${XCORD}" ]]; then
        XCORD=${NEW_XCORD:=XCORD}
      fi
      YCORD=${NEW_YCORD:=YCORD};;
    '&')
      grumpy_stable_master;;
    '%')
      angry_cow;;
    'v')
      brookshire_night_1_intro;;
  esac
  stable_night_1_move
}

function new_game {
  if [ ! -d "${SAVES}" ]; then
      mkdir "${SAVES}"
  fi
  readarray STORY_INTRO < story/intro
  LENGTH="${#STORY_INTRO[*]}"
  for (( LINES=LENGTH; LINES>=0; LINES-- )); do
      printf "\033c"
      eval printf "%.0s$'\n'" "{0..$LINES}"
      printf " %s" "${STORY_INTRO[*]:0:((LENGTH - LINES))}"
      ! read -r -t .5
  done
  printf "\033c"
  printf " %s" "${STORY_INTRO[*]:0:$LENGTH}"
  read -r -s _
  for (( PLACE=12; PLACE>=7; PLACE-- )); do
  printf "\033c"
  sed -re "${PLACE} s/^(.{27}).(.*)/\1\&\2/" -e '7s/^(.{19}).(.*)/\1\@\2/' places/stable_night_1_map
  ! read -r -t .5
  done
  for (( PLACE=26; PLACE>=22; PLACE-- )); do
  printf "\033c"
  sed -re "7 s/^(.{$PLACE}).(.*)/\1\&\2/" -e '7s/^(.{19}).(.*)/\1\@\2/' places/stable_night_1_map
  ! read -r -t .5
  done
  ! read -r -t 0.1 -n 1000
  printf "\033c"
  printf "%s\n" "${GRUMPY_STABLE_MASTER_IMAGE:=$(< images/grumpy_stable_master)}"
  printf "Grumpy Stable Master: \"Hey, you\! What\'s your name, kid?\"\n"
  function name {
      printf "Name: "
      read -r -a NAME
      if [[ "${NAME}" ]]; then
          if [[ ${#NAME[*]} = "1" ]]; then
              NAME="${NAME[*]}"
              if [[ -f "${SAVES}/${NAME}" ]]; then
                  printf "Sorry, there is already a user by that name, try another.\n"
                  name
              else
                  printf "\033c"
                  printf "\n\n\n\n\n\n\n\n"
                  printf "       From now on all your actions will be saved automatically\n"
                  printf "                   Press ENTER if you understand."
                  read -r -s _
                  printf "%s" "$(<save.template)" > "${SAVES}/${NAME}"
              fi
          else
              printf "You can only have a one word name.\n"
          fi
      else
          printf "Sorry, you must have a name to continue\!\n"
          name
      fi
  }
  name
  printf "\033c"
  printf "%s\n ""${GRUMPY_STABLE_MASTER_IMAGE:=$(< images/grumpy_stable_master)}"
  printf "Grumpy Stable Master: \"Yeah, well, you picked the wrong\n"
  printf "stable to sleep in, %s\!\n" "${NAME}"
  read -r -s _
  XCORD=20
  YCORD=7
  MAP="${STABLE_NIGHT_1_MAP:=$(< places/stable_night_1_map)}"
  readarray MAP_TERRIAN < places/stable_night_1_terrian
  stable_night_1_move
}

function load_game {
  SAVED_GAMES=( "${SAVES}"/* )
  if [[ ! -d "${SAVES}" ]] || [[ ${#SAVED_GAMES[*]} -eq 0 ]]; then
    printf "\033c"
    printf "%s\n\n" "${SWORD_IMAGE:=$(< images/sword)}"
    printf "  You have no saved games or your have chosen the wrong save directory.\n"
    printf "                  Press enter to return the main menu."
    read -r -s _
    main_menu
  else
    printf "\033c"
    printf "\n\n\n      Saved Games:\n\n"
    if [ ${#SAVED_GAMES[*]} -eq 1 ]; then
      printf "\e[1;32m    %s - %s\e[m\n\n" "${SAVED_GAMES[$LINE]##*/}" "$(sed -n '/save/p' "${SAVED_GAMES[$LINE]}" | cut -f 2 -d ' ' | sed 's/_/ /g')"
      read -r -s -n 1 LOAD
      if [[ "${LOAD}" ]]; then
        case "${LOAD}" in
          d|C)
            XCORD="$(sed -n '/save/p' "${SAVED_GAMES[$LINE]}" | cut -f 3 -d ' ')"
            YCORD="$(sed -n '/save/p' "${SAVED_GAMES[$LINE]}" | cut -f 4 -d ' ')"
            NAME="${SAVED_GAMES[$LINE]##*/}"
            SAVE="$(sed -n '/save/p' "${SAVED_GAMES[$LINE]}" | cut -f 2 -d ' ')"
            MAP="$(< places/"${SAVE}"_map)"
            if [[ -f "places/${SAVE}_hidden" ]]; then
              readarray MAP_HIDDEN < "places/${SAVE}_hidden"
            fi
            readarray MAP_TERRIAN < "places/${SAVE}_terrian"
            "${SAVE}"_move;;
          a|D)
            main_menu;;
          *)
            load_game;;
        esac
      else
        XCORD="$(sed -n '/save/p' "${SAVED_GAMES[$LINE]}" | cut -f 3 -d ' ')"
        YCORD="$(sed -n '/save/p' "${SAVED_GAMES[$LINE]}" | cut -f 4 -d ' ')"
        NAME="${SAVED_GAMES[$LINE]##*/}"
        SAVE="$(sed -n '/save/p' "${SAVED_GAMES[$LINE]}" | cut -f 2 -d ' ')"
        MAP="$(< "places/${SAVE}_map")"
        if [[ -f "places/${SAVE}_hidden" ]]; then
          readarray MAP_HIDDEN < "places/${SAVE}_hidden"
        fi
        readarray MAP_TERRIAN < "places/${SAVE}_terrian"
        "${SAVE}"_move
      fi
  elif [[ $LINE -gt 0 ]] && [[ $LINE -lt $((${#SAVED_GAMES[*]} - 1)) ]] ; then
    printf "    %s - %s\n\n" "${SAVED_GAMES[((LINE - 1))]##*/}" "$(sed -n '/save/p' "${SAVED_GAMES[((LINE - 1))]}" | cut -f 2 -d ' ' | sed 's/_/ /g')"
    printf "\e[1;32m    %s - %s\e[m\n\n" "${SAVED_GAMES[$LINE]##*/}" "$(sed -n '/save/p' "${SAVED_GAMES[$LINE]}" | cut -f 2 -d ' ' | sed 's/_/ /g')"
    printf "    %s - %s\n\n" "${SAVED_GAMES[((LINE + 1))]##*/}" "$(sed -n '/save/p' "${SAVED_GAMES[((LINE + 1))]}" | cut -f 2 -d ' ' | sed 's/_/ /g')"
  elif  [[ $LINE -eq $((${#SAVED_GAMES[*]} - 1)) ]]; then
    printf "    %s - %s\n\n" "${SAVED_GAMES[((LINE - 2))]##*/}" "$(sed -n '/save/p' "${SAVED_GAMES[((LINE - 2))]}" | cut -f 2 -d ' ' | sed 's/_/ /g')"
    printf "    %s - %s\n\n" "${SAVED_GAMES[((LINE - 1))]##*/}" "$(sed -n '/save/p' "${SAVED_GAMES[((LINE - 1))]}" | cut -f 2 -d ' ' | sed 's/_/ /g')"
    printf "\e[1;32m    %s - %s\e[m\n\n" "${SAVED_GAMES[$LINE]##*/}" "$(sed -n '/save/p' "${SAVED_GAMES[$LINE]}" | cut -f 2 -d ' ' | sed 's/_/ /g')"
  elif [[ ${LINE} -eq 0 ]]; then
    printf "\e[1;32m    %s - %s\e[m\n\n" "${SAVED_GAMES[$LINE]##*/}" "$(sed -n '/save/p' "${SAVED_GAMES[$LINE]}" | cut -f 2 -d ' ' | sed 's/_/ /g')"
    printf "    %s - %s\n\n" "${SAVED_GAMES[((LINE + 1))]##*/}" "$(sed -n '/save/p' "${SAVED_GAMES[((LINE + 1))]}" | cut -f 2 -d ' ' | sed 's/_/ /g')"
    printf "    %s - %s\n\n" "${SAVED_GAMES[((LINE + 2))]##*/}" "$(sed -n '/save/p' "${SAVED_GAMES[((LINE + 2))]}" | cut -f 2 -d ' ' | sed 's/_/ /g')"
  fi
  printf "\n\n  Press w to go up, s to go down, \n"
  printf "  d or enter to select, a or b to go back. "
  read -r -s -n 1 LOAD
  if [[ "${LOAD}" ]]; then
    case "${LOAD}" in
    w|A)
      if [[ ${LINE} -eq 0 ]]; then
        load_game
      else
        LINE=$((LINE - 1))
        load_game
      fi;;
    s|B)
      if [[ $LINE -lt $((${#SAVED_GAMES[*]} - 1)) ]]; then
        LINE=$((LINE + 1))
        load_game
      else
        load_game
      fi;;
    d|C|'')
      XCORD=$(sed -n '/save/p' "${SAVED_GAMES[$LINE]}" | cut -f 3 -d ' ')
      YCORD=$(sed -n '/save/p' "${SAVED_GAMES[$LINE]}" | cut -f 4 -d ' ')
      NAME="${SAVED_GAMES[$LINE]##*/}"
      SAVE=$(sed -n '/save/p' "${SAVED_GAMES[$LINE]}" | cut -f 2 -d ' ')
      MAP="$(< "places/${SAVE}_map")"
      if [[ -f "places/${SAVE}_hidden" ]]; then
        readarray MAP_HIDDEN < "places/${SAVE}_hidden"
      fi
      readarray MAP_TERRIAN < "places/${SAVE}_terrian"
      "${SAVE}"_move;;
    a|D)
      main_menu;;
    *)
      load_game;;
    esac
  else
  XCORD=$(sed -n '/save/p' "${SAVED_GAMES[$LINE]}" | cut -f 3 -d ' ')
  YCORD=$(sed -n '/save/p' "${SAVED_GAMES[$LINE]}" | cut -f 4 -d ' ')
  NAME="${SAVED_GAMES[$LINE]##*/}"
  SAVE=$(sed -n '/save/p' "${SAVED_GAMES[$LINE]}" | cut -f 2 -d ' ')
  MAP="$(< "places/${SAVE}_map")"
  if [[ -f "places/${SAVE}_hidden" ]]; then
    readarray MAP_HIDDEN < "places/${SAVE}_hidden"
  fi
  readarray MAP_TERRIAN < "places/${SAVE}_terrian"
  "${SAVE}"_move
  fi
fi
}

function main_menu {
  printf "\033c"
  MENU=( 'New' 'Load' 'Credits' 'Quit' )
  MENU_OPTION=${MENU_OPTION:=0}
  printf "%s\n\n" "${SWORD_IMAGE:=$(< images/sword)}"
  if [[ ${MENU[$MENU_OPTION]} = 'New' ]]; then
    printf "                              \e[1;32m1. New Game\e[m\n\n"
  else
    printf "                              1. New Game\n\n"
  fi
  if [[ ${MENU[$MENU_OPTION]} = 'Load' ]]; then
    printf "                              \e[1;32m2. Load Game\e[m\n\n"
  else
    printf "                              2. Load Game\n\n"
  fi
  if [[ ${MENU[$MENU_OPTION]} = 'Credits' ]]; then
    printf "                              \e[1;32m3. Credits\e[m\n\n"
  else
    printf "                              3. Credits\n\n"
  fi
  if [[ ${MENU[$MENU_OPTION]} = 'Quit' ]]; then
    printf "                              \e[1;32m4. Quit\e[m\n\n"
  else
    printf "                              4. Quit\n\n"
  fi
  read -r -s -n 1 MENU_KEY
  if [[ $MENU_KEY ]]; then
    case $MENU_KEY in
      1|n)
        new_game;;
      2|l)
        LINE=0
        load_game;;
      3|c)
        printf "\033c"
        printf "%s" "${CREDITS:=$(< credits)}"
        read -r -s _;;
      4|q)
        printf "\033c"
        exit;;
      A|w)
        MENU_OPTION=$((((MENU_OPTION - 1)) % ${#MENU[*]}));;
      B|s)
        MENU_OPTION=$((((MENU_OPTION + 1)) % ${#MENU[*]}));;
    esac
  else
    case $MENU_OPTION in
      0)
        new_game;;
      1)
        LINE=0
        load_game;;
      2)
        printf "\033c"
        printf "%s" "${CREDITS:=$(< credits)}"
        read -r -s _;;
      3)
        printf "\033c"
        exit;;
    esac
  fi
  main_menu
}

main() {
  while getopts "s:" OPTION; do
    case "${OPTION}" in
      s)
        local SAVES="${OPTARG}";;
    esac
  done
  SAVES="${SAVES:=${HOME}/.bashadventures}"
  title_animation
  main_menu
}

main "${@}"
