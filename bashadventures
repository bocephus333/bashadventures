#! /bin/bash
# Bash Adventures, a text based adventure game.
if [ "$1" ]; then
  if [ "$1" = "--saves" ] || [ "$1" = "-s" ]; then
    if [ "$2" ]; then
      if [ -d "$2" ]; then
        SAVES="$2"
      else
        echo "That directory does not exist."
        exit
      fi
    else
      echo "The option --saves must be followed by a directory."
      exit
    fi
  else
    SAVES="$HOME/.bashadventures"
  fi
else
  SAVES="$HOME/.bashadventures"
fi

function start {
  for LINE in {5..0}; do
    printf "\033c"
    for _ in $(eval echo "{0..$LINE}"); do
      printf "\n"
    done
    printf "${SWORD_IMAGE:=$(< images/sword)}"
    sleep .2
  done
  read -t 0.1 -n 1000
}

function not_done {
  printf "\033c"
  echo "${SWORD_IMAGE:=$(< images/sword)}"
  printf "                        \033[1;31mThis feature is not"
  printf "                        currently implemented"
  printf "                        press enter to go"
  printf "                        back to the menu.\033[0m"
  read -s _
}

function spider_no_weapon {
  printf "\033c"
  echo "${SPIDER_IMAGE:=$(< images/spider)}"
  echo You see a large and very dangerous looking spider.
  echo Without a weapon you dare not get any closer.
  read -s _
}

function cave_cliff {
  printf "\033c"
  echo "${CAVE_CLIFF_IMAGE:=$(< images/cave_cliff)}"
  echo
  echo
  echo "This cliff is too high for you to reach the ledge."
  echo "Maybe there is another way out."
  read -s _
}

quit_prompt() {
  printf "\033c"
  echo "${DISPLAY}" | \
  sed -re '12 s/^(.{19}).{23}(.*)/\1\┌─────────────────────┐\2/' \
       -e '13 s/^(.{19}).{23}(.*)/\1\│    Are you sure     │\2/' \
       -e '14 s/^(.{19}).{23}(.*)/\1\│ want to quit? (y|n) │\2/' \
       -e '15 s/^(.{19}).{23}(.*)/\1\└─────────────────────┘\2/'
  read -s -n 1 QUIT
  if [[ "${QUIT}" = 'y' ]]; then
    main_menu
  fi
}

forest_trail_cave_night_1_move() {
  printf "\033c"
  sed -i s/.*save.*/"save forest_trail_cave_night_1 $XCORD $YCORD"/g "${SAVES}/${NAME}"
  Y=${YCORD:=23}
  X=$((${XCORD:=25} - 3))
  DISPLAY="$(echo "${MAP}" | \
  sed -re "$((Y - 2)) s/^(.{${X}})(.*)/\1${MAP_HIDDEN[$((Y - 3))]:${X}:7}\2/" \
     -e "$((Y - 1)) s/^(.{${X}})(.*)/\1${MAP_HIDDEN[$((Y - 2))]:${X}:7}\2/" \
     -e "${Y}       s/^(.{${X}})(.*)/\1${MAP_HIDDEN[$((Y - 1))]:${X}:3}\@${MAP_HIDDEN[$((Y - 1))]:$((X + 4)):3}\2/" \
     -e "$((Y + 1)) s/^(.{${X}})(.*)/\1${MAP_HIDDEN[$Y]:${X}:7}\2/" \
     -e "$((Y + 2)) s/^(.{${X}})(.*)/\1${MAP_HIDDEN[$((Y + 1))]:${X}:7}\2/")"
  echo "${DISPLAY}"
  echo
  echo YCord: "${YCORD}" #debug
  echo XCord: "${XCORD}" #debug
  read -s -n 1 MOVE
  if [[ "${MOVE}" ]]; then
    case "${MOVE}" in
      a|D)
        NEW_XCORD="$((XCORD - 1))"
        NEW_YCORD="${YCORD}";;
      w|A)
        NEW_XCORD="${XCORD}"
        NEW_YCORD="$((YCORD - 1))";;
      s|B)
        NEW_XCORD="${XCORD}"
        NEW_YCORD="$((YCORD + 1))";;
      d|C)
        NEW_XCORD="$((XCORD + 1))"
        NEW_YCORD="${YCORD}";;
      q)
        quit_prompt;;
      *)
        NEW_XCORD="${XCORD}"
        NEW_YCORD="${YCORD}";;
    esac
  else
    NEW_XCORD="${XCORD}"
    NEW_YCORD="${YCORD}"
  fi
  NEW_LOC="${MAP_TERRIAN[$((NEW_YCORD - 1))]:$NEW_XCORD:1}"
  case "${NEW_LOC}" in
    ' ')
      XCORD="${NEW_XCORD}"
      YCORD="${NEW_YCORD}";;
    '┬')
      cave_cliff;;
    'ж')
      spider_no_weapon;;
  esac
  forest_trail_cave_night_1_move
}

function forest_trail_sign {
  printf "\033c"
  echo "${FOREST_TRAIL_SIGN_IMAGE:=$(< images/forest_trail_sign)}"
  read -s _
}

function forest_trail_night_1_move {
  printf "\033c"
  sed -i s/.*save.*/"save forest_trail_night_1 $XCORD $YCORD"/g "${SAVES}/${NAME}"
  DISPLAY="$(echo "${MAP}" |\
  sed -re "$YCORD s/^(.{$XCORD}).(.*)/\1\@\2/" \
     -e "10 s/^(.{43}).(.*)/\1\ж\2/" \
     -e "4 s/^(.{48}).(.*)/\1\ж\2/" \
     -e "5 s/^(.{13}).(.*)/\1\ж\2/" \
     -e "12 s/^(.{26}).(.*)/\1\ж\2/")"
  echo "${DISPLAY}"
  echo
  echo YCord: "$YCORD" #debug
  echo XCord: "$XCORD" #debug
  read -s -n 1 MOVE
  if [[ "${MOVE}" ]]; then
    case "${MOVE}" in
    a|D)
      NEW_XCORD=$((XCORD - 1))
      NEW_YCORD="${YCORD}";;
    w|A)
      NEW_XCORD="${XCORD}"
      NEW_YCORD=$((YCORD - 1));;
    s|B)
      NEW_XCORD="${XCORD}"
      NEW_YCORD=$((YCORD + 1));;
    d|C)
      NEW_XCORD=$((XCORD + 1))
      NEW_YCORD="${YCORD}";;
    q)
      quit_prompt;;
    *)
      NEW_XCORD="${XCORD}"
      NEW_YCORD="${YCORD}";;
    esac
  else
    NEW_XCORD=$XCORD
    NEW_YCORD=$YCORD
  fi
  NEW_LOC="${MAP_TERRIAN[$((NEW_YCORD - 1))]:$NEW_XCORD:1}"
  case $NEW_LOC in
  ' ')
    XCORD=$NEW_XCORD
    YCORD=$NEW_YCORD;;
  'ф')
    forest_trail_sign;;
  'ж')
    spider_no_weapon;;
  'Ʌ')
    YCORD=23
    XCORD=25
    MAP="${FOREST_TRAIL_CAVE_NIGHT_1_MAP:=$(< places/forest_trail_cave_night_1_map)}"
    readarray MAP_HIDDEN < places/forest_trail_cave_night_1_hidden
    readarray MAP_TERRIAN < places/forest_trail_cave_night_1_terrian
    readarray CHAR_SHEET < "${SAVES}/${NAME}"
    forest_trail_cave_night_1_move;;
  '<')
    YCORD=19
    XCORD=57
    MAP="${BROOKSHIRE_NIGHT_1_MAP:=$(< places/brookshire_night_1_map)}"
    readarray MAP_TERRIAN < places/brookshire_night_1_terrian
    readarray CHAR_SHEET < "${SAVES}/${NAME}"
    brookshire_night_1_move;;
  esac
  forest_trail_night_1_move
}


brookshire_night_watch_block_west() {
  PLACES=$((15 - NEW_YCORD))
  for PLACE in $(eval echo "{1..$PLACES}"); do
  printf "\033c"
  NEW_GUARD_PLACE=$((15 - PLACE))
  echo "${MAP}" |\
  sed -re "$YCORD s/^(.{$XCORD}).(.*)/\1\@\2/" \
       -e "2 s/^(.{27}).(.*)/\1\£\2/" \
       -e "${NEW_GUARD_PLACE} s/^(.{1}).(.*)/\1\£\2/" \
       -e "20 s/^(.{57}).(.*)/\1\£\2/"
  sleep .5
  done
  printf "\033c"
  echo "${NIGHT_WATCH_IMAGE:=$(< images/night_watch)}"
  echo Night Watchman: \"Sorry, kid, no body leaves the village after dark.\"
  read -s _
  for PLACE in $(eval echo "{$PLACES..1}"); do
  printf "\033c"
  NEW_GUARD_PLACE=$((15 - PLACE))
  echo "${MAP}" |\
  sed -re "$YCORD s/^(.{$XCORD}).(.*)/\1\@\2/" \
       -e "2 s/^(.{27}).(.*)/\1\£\2/" \
       -e "${NEW_GUARD_PLACE} s/^(.{1}).(.*)/\1\£\2/" \
       -e "20 s/^(.{57}).(.*)/\1\£\2/"
  sleep .5
  done
  read -t 0.00001 -n 1000
}

brookshire_night_watch_block_north() {
  PLACES=$((NEW_XCORD - 27))
  for PLACE in $(eval echo "{1..$PLACES}"); do
  printf "\033c"
  NEW_GUARD_PLACE=$((PLACE + 27))
  echo "${MAP}" |\
  sed -re "$YCORD s/^(.{$XCORD}).(.*)/\1\@\2/" \
       -e "2 s/^(.{$NEW_GUARD_PLACE}).(.*)/\1\£\2/" \
       -e "15 s/^(.{1}).(.*)/\1\£\2/" \
       -e "20 s/^(.{57}).(.*)/\1\£\2/"
  sleep .5
  done
  printf "\033c"
  echo "${NIGHT_WATCH_IMAGE:=$(< images/night_watch)}"
  echo Night Watchman: \"Sorry, kid, no body leaves the village after dark.\"
  read -s _
  for PLACE in $(eval echo "{$PLACES..1}"); do
  printf "\033c"
  NEW_GUARD_PLACE=$((PLACE + 27))
  echo "${MAP}" |\
  sed -re "$YCORD s/^(.{$XCORD}).(.*)/\1\@\2/" \
       -e "2 s/^(.{$NEW_GUARD_PLACE}).(.*)/\1\£\2/" \
       -e "15 s/^(.{1}).(.*)/\1\£\2/" \
       -e "20 s/^(.{57}).(.*)/\1\£\2/"
  sleep .5
  done
  read -t 0.00001 -n 1000
}

brookshire_sign_north() {
  printf "\033c"
  echo "${BROOKSHIRE_SIGN_NORTH_IMAGE:=$(< images/brookshire_sign_north)}"
  read -s _
}

brookshire_sign_west() {
  printf "\033c"
  echo "${BROOKSHIRE_SIGN_WEST_IMAGE:=$(< images/brookshire_sign_west)}"
  read -s _
}

brookshire_sign_east() {
  printf "\033c"
  echo "${BROOKSHIRE_SIGN_EAST_IMAGE:=$(< images/brookshire_sign_east)}"
  read -s _
}

brookshire_sign_market() {
  printf "\033c"
  echo "${BROOKSHIRE_SIGN_MARKET_IMAGE:=$(< images/brookshire_sign_market)}"
  read -s _
}

brookshire_sign_temple() {
  printf "\033c"
  echo "${BROOKSHIRE_SIGN_TEMPLE_IMAGE:=$(< images/brookshire_sign_temple)}"
  read -s _
}

house_night_1() {
  printf "\033c"
  echo "${BROOKSHIRE_HOUSE_NIGHT_1_IMAGE:=$(< images/brookshire_house_night_1)}"
  echo The door is locked and the lights are out. Come back in the morning.
  read -s _
}

house_night_2() {
  printf "\033c"
  echo "${BROOKSHIRE_HOUSE_NIGHT_2_IMAGE:=$(< images/brookshire_house_night_2)}"
  echo The door is locked and the lights are out. Come back in the morning.
  read -s _
}

temple_night() {
  printf "\033c"
  echo "${TEMPLE_NIGHT_IMAGE:=$(< images/temple_night)}"
  echo The temple is closed at night. Solace must be found elsewhere.
  read -s _
}

brookshire_guard_tower_night_1() {
  printf "\033c"
  echo "${BROOKSHIRE_GUARD_TOWER_IMAGE:=$(< images/guard_tower)}"
  echo The door is locked --
  echo and on second thought is going into the guard tower really a good idea?
  read -s _
}

brookshire_barn_door_night_1() {
  printf "\033c"
  echo "${BROOKSHIRE_BARN_NIGHT_IMAGE:=$(< images/barn_night)}"
  echo "Probably not a good idea to go back in there."
  read -s _
}

brookshire_night_1_move() {
  printf "\033c"
  sed -i s/.*save.*/"save brookshire_night_1 $XCORD $YCORD"/g "${SAVES}/${NAME}"
  DISPLAY="$(echo "${MAP}" |\
  sed -re "$YCORD s/^(.{$XCORD}).(.*)/\1\@\2/" \
     -e "2 s/^(.{27}).(.*)/\1\£\2/" \
     -e "15 s/^(.{1}).(.*)/\1\£\2/" \
     -e "20 s/^(.{57}).(.*)/\1\£\2/")"
  echo "${DISPLAY}"
  echo
  echo YCord: $YCORD #debug
  echo XCord: $XCORD #debug
  read -s -n 1 MOVE
  if [ "${MOVE}" ]; then
    case "${MOVE}" in
      a|D)
        NEW_XCORD=$((XCORD - 1))
        NEW_YCORD=$YCORD;;
      w|A)
        NEW_XCORD=$XCORD
        NEW_YCORD=$((YCORD - 1));;
      s|B)
        NEW_XCORD=$XCORD
        NEW_YCORD=$((YCORD + 1));;
      d|C)
        NEW_XCORD=$((XCORD + 1))
        NEW_YCORD=$YCORD;;
      q)
        quit_prompt;;
      *)
        NEW_XCORD=$XCORD
        NEW_YCORD=$YCORD;;
    esac
  else
    NEW_XCORD=$XCORD
    NEW_YCORD=$YCORD
  fi
  NEW_LOC="${MAP_TERRIAN[$((NEW_YCORD - 1))]:$NEW_XCORD:1}"
  case $NEW_LOC in
    ' ')
      XCORD=${NEW_XCORD:=XCORD}
      YCORD=${NEW_YCORD:=YCORD};;
    'F')
      brookshire_barn_door_night_1;;
    'e')
      YCORD=10
      XCORD=2
      MAP="${FOREST_TRAIL_TRAIL_NIGHT_1_MAP:=$(< places/forest_trail_night_1_map)}"
      readarray MAP_TERRIAN < places/forest_trail_night_1_terrian
      readarray CHAR_SHEET < "${SAVES}/${NAME}"
      forest_trail_night_1_move;;
    'G')
      printf "\033c"
      echo "${NIGHT_WATCH_IMAGE:=$(< images/night_watch)}"
      echo Night Watchman: \"Quit bugging me and go home, kid.\"
      read -s _;;
    'c')
      brookshire_sign_temple;;
    'C')
      temple_night;;
    'T')
      brookshire_guard_tower_night_1;;
    'E')
      printf "\033c"
      echo "${NIGHT_WATCH_SLEEPING_IMAGE:=$(< images/night_watch_sleeping)}"
      echo You find a guard sleeping at his post.
      read -s _;;
    'w')
      brookshire_night_watch_block_west;;
    'n')
      brookshire_night_watch_block_north;;
    'N')
      brookshire_sign_north;;
    'W')
      brookshire_sign_west;;
    'S')
      brookshire_sign_east;;
    'M')
      brookshire_sign_market;;
    '1')
      house_night_1;;
    '2')
      house_night_2;;
  esac
  brookshire_night_1_move
}

function brookshire_night_1_intro {
  YCORD=23
  XCORD=21
  printf "\033c"
  echo "${BROOKSHIRE_BARN_NIGHT_IMAGE:=$(< images/barn_night)}"
  echo
  echo
  echo You can hear the stable master coming.
  echo Better find somewhere to hide\!
  echo
  echo "  Press enter to continue."
  read -s _
  MAP="${BROOKSHIRE_NIGHT_1_MAP:=$(< places/brookshire_night_1_map)}"
  readarray MAP_TERRIAN < places/brookshire_night_1_terrian
  readarray CHAR_SHEET < "${SAVES}/${NAME}"
  brookshire_night_1_move
}

function grumpy_stable_master {
  printf "\033c"
  echo "${GRUMPY_STABLE_MASTER_IMAGE:=$(< images/grumpy_stable_master)}"
  echo Grumpy Stable Master: \"Stop moving so fast, boy\!\"
  read -s -n 1 _
}

function angry_cow {
  printf "\033c"
  echo "${ANGRY_COW_IMAGE:=$(< images/cow)}"
  read -s -n 1 _
}

function stable_night_1_move {
  printf "\033c"
  sed -i s/.*save.*/"save stable_night_1_move $XCORD $YCORD"/g "${SAVES}/${NAME}"
  DISPLAY="$(echo "${MAP}" |\
  sed -re "$YCORD s/^(.{$XCORD}).(.*)/\1\@\2/" \
       -e '7s/^(.{22}).(.*)/\1\&\2/')"
  echo "${DISPLAY}"
  echo Quick\! Run out of the stable and get away from the stable master\!
  echo
  echo YCord: $YCORD #debug
  echo XCord: $XCORD #debug
  read -s -n 1 MOVE
  if [[ "${MOVE}" ]]; then
    case $MOVE in
      a|D)
      	NEW_XCORD=$((XCORD - 1))
      	NEW_YCORD=$YCORD;;
      w|A)
      	NEW_XCORD=$XCORD
      	NEW_YCORD=$((YCORD - 1));;
      s|B)
      	NEW_XCORD=$XCORD
      	NEW_YCORD=$((YCORD + 1));;
      d|C)
      	NEW_XCORD=$((XCORD + 1))
      	NEW_YCORD=$YCORD;;
      q)
    	 quit_prompt;;
      *)
      	NEW_XCORD=$XCORD
      	NEW_YCORD=$YCORD;;
    esac
  else
    NEW_XCORD=$XCORD
    NEW_YCORD=$YCORD
  fi
  NEW_LOC="${MAP_TERRIAN[$((NEW_YCORD - 1))]:$NEW_XCORD:1}"
  case $NEW_LOC in
    ' ')
      XCORD=${NEW_XCORD:=XCORD}
      YCORD=${NEW_YCORD:=YCORD};;
    '0')
      if [[ "${NEW_XCORD}" -le "${XCORD}" ]]; then
        XCORD=${NEW_XCORD:=XCORD}
      fi
      YCORD=${NEW_YCORD:=YCORD};;
    '&')
      grumpy_stable_master;;
    '%')
      angry_cow;;
    'v')
      brookshire_night_1_intro;;
  esac
  stable_night_1_move
}

function new_game {
  printf "\033c"
  if [ ! -d "${SAVES}" ]; then
      mkdir "${SAVES}"
  fi
  COUNT="1"
  LENGTH=$(wc -l story/intro | cut -f 1 -d ' ')
  while [[ $COUNT -lt $LENGTH ]]; do
      LINES=$((LENGTH - COUNT))
      while [ $LINES -gt 0 ]; do
          echo
          LINES=$((LINES - 1))
      done
      head -n $COUNT story/intro
      sleep .5
      printf "\033c"
      COUNT=$((COUNT + 1))
  done
  head -n $COUNT story/intro
  read -s _
  for PLACE in {12..7}; do
  printf "\033c"
  sed -re "${PLACE} s/^(.{27}).(.*)/\1\&\2/" -e '7s/^(.{19}).(.*)/\1\@\2/' places/stable
  sleep .5
  done
  for PLACE in {26..22}; do
  printf "\033c"
  sed -re "7 s/^(.{$PLACE}).(.*)/\1\&\2/" -e '7s/^(.{19}).(.*)/\1\@\2/' places/stable
  sleep .5
  done
  read -t 0.1 -n 1000
  printf "\033c"
  echo "${GRUMPY_STABLE_MASTER_IMAGE:=$(< images/grumpy_stable_master)}"
  echo Grumpy Stable Master: \"Hey, you\! What\'s your name, kid?\"
  function name {
      echo -n "Name: "
      read NAME
      if [[ "${NAME}" ]]; then
          if [[ $(echo "${NAME}" | wc -w ) = "1" ]]; then
              if [[ -f "${SAVES}/${NAME}" ]]; then
                  echo Sorry, there is already a user by that name, try another.
                  name
              else
                  printf "\033c"
                  printf "\n\n\n\n\n\n\n\n"
                  printf "       From now on all your actions will be saved automatically"
                  printf "                   Press ENTER if you understand."
                  read -s _
                  cp save.template "${SAVES}/${NAME}"
              fi
          else
              echo You can only have a one word name.
          fi
      else
          echo Sorry, you must have a name to continue\!
          name
      fi
  }
  name
  printf "\033c"
  echo "${GRUMPY_STABLE_MASTER_IMAGE:=$(< images/grumpy_stable_master)}"
  echo Grumpy Stable Master: \"Yeah, well, you picked the wrong
  echo stable to sleep in, "${NAME}"\!\"
  read -s _
  XCORD=20
  YCORD=7
  MAP="${STABLE_NIGHT_1_MAP:=$(< places/stable_night_1_map)}"
  readarray MAP_TERRIAN < places/stable_night_1_terrian
  readarray CHAR_SHEET < "${SAVES}/${NAME}"
  stable_night_1_move
}

function load_game {
  SAVED_GAMES=( "${SAVES}"/* )
  if [ ${#SAVED_GAMES[*]} -gt 0 ]; then
  printf "\033c"
  echo
  echo
  echo
  echo "      Saved Games:"
  echo
  if [ ${#SAVED_GAMES[*]} -eq 1 ]; then
    echo
    echo
    echo -n "    "
    printf "\e[1;32m${SAVED_GAMES[$LINE]##*/} - $(sed -n '/saves/p' ${SAVED_GAMES[$LINE]} | cut -f 2 -d '=' | cut -f 1 -d '_') $(sed -n '/save/p' ${SAVED_GAMES[$LINE]} | cut -f 2 -d ' ' | cut -f 2  -d '_') $(sed -n '/save/p' ${SAVED_GAMES[$LINE]} | cut -f 2 -d ' ' | cut -f 3 -d '_')\e[m"
    echo
    echo
    echo -n "  d or enter to select, a or b to go back. "
    read -s -n 1 LOAD
    if [[ "${LOAD}" ]]; then
      case "${LOAD}" in
        d|C)
          XCORD="$(sed -n '/save/p' ${SAVED_GAMES[$LINE]} | cut -f 3 -d ' ')"
          YCORD="$(sed -n '/save/p' ${SAVED_GAMES[$LINE]} | cut -f 4 -d ' ')"
          NAME=${SAVED_GAMES[$LINE]##*/}
          SAVE="$(sed -n '/save/p' ${SAVED_GAMES[$LINE]} | cut -f 2 -d ' ')"
          MAP="$(< places/"${SAVE}"_map)"
          if [[ -f "places/${SAVE}_hidden" ]]; then
            readarray MAP_HIDDEN < "places/${SAVE}_hidden"
          fi
          readarray MAP_TERRIAN < "places/${SAVE}_terrian"
          readarray CHAR_SHEET < "${SAVES}/${NAME}"
          "${SAVE}"_move;;
        a|D)
          main_menu;;
        *)
          load_game;;
      esac
    else
      XCORD="$(sed -n '/save/p' ${SAVED_GAMES[$LINE]} | cut -f 3 -d ' ')"
      YCORD="$(sed -n '/save/p' ${SAVED_GAMES[$LINE]} | cut -f 4 -d ' ')"
      NAME=${SAVED_GAMES[$LINE]##*/}
      SAVE="$(sed -n '/save/p' ${SAVED_GAMES[$LINE]} | cut -f 2 -d ' ')"
      MAP="$(< places/${SAVE}_map)"
      if [[ -f "places/${SAVE}_hidden" ]]; then
        readarray MAP_HIDDEN < "places/${SAVE}_hidden"
      fi
      readarray MAP_TERRIAN < "places/${SAVE}_terrian"
      readarray CHAR_SHEET < "${SAVES}/${NAME}"
      "${SAVE}"_move
    fi
  elif [ $LINE -gt 1 ] && [ $LINE -lt ${#SAVED_GAMES[*]} ] ; then
    echo -n "    "
    echo "${SAVED_GAMES[((LINE - 1))]##*/} -  $(sed -n '/saves/p' ${SAVED_GAMES[((LINE - 1))]} | cut -f 2 -d '=' | cut -f 1 -d '_') $(sed -n '/save/p' ${SAVED_GAMES[((LINE - 1))]} | cut -f 2 -d ' ' | cut -f 2  -d '_') $(sed -n '/save/p' ${SAVED_GAMES[((LINE - 1))]} | cut -f 2 -d ' ' | cut -f 3 -d '_')"
    echo
    echo -n "    "
    printf "\e[1;32m${SAVED_GAMES[$LINE]##*/} - $(sed -n '/saves/p' ${SAVED_GAMES[$LINE]} | cut -f 2 -d '=' | cut -f 1 -d '_') $(sed -n '/save/p' ${SAVED_GAMES[$LINE]} | cut -f 2 -d ' ' | cut -f 2  -d '_') $(sed -n '/save/p' ${SAVED_GAMES[$LINE]} | cut -f 2 -d ' ' | cut -f 3 -d '_')\e[m"
    echo
    echo -n "    "
    echo "${SAVED_GAMES[((LINE + 1))]##*/} -  $(sed -n '/saves/p' ${SAVED_GAMES[((LINE + 1))]} | cut -f 2 -d '=' | cut -f 1 -d '_') $(sed -n '/save/p' ${SAVED_GAMES[((LINE + 1))]} | cut -f 2 -d ' ' | cut -f 2  -d '_') $(sed -n '/save/p' ${SAVED_GAMES[((LINE + 1))]} | cut -f 2 -d ' ' | cut -f 3 -d '_')"
  elif  [ $LINE -eq ${#SAVED_GAMES[*]} ]; then
    echo -n "    "
    echo "${SAVED_GAMES[((LINE - 2))]##*/} -  $(sed -n '/saves/p' ${SAVED_GAMES[((LINE - 2))]} | cut -f 2 -d '=' | cut -f 1 -d '_') $(sed -n '/save/p' ${SAVED_GAMES[((LINE - 2))]} | cut -f 2 -d ' ' | cut -f 2  -d '_') $(sed -n '/save/p' ${SAVED_GAMES[((LINE - 2))]} | cut -f 2 -d ' ' | cut -f 3 -d '_')"
    echo
    echo -n "    "
    echo "${SAVED_GAMES[((LINE - 1))]##*/} -  $(sed -n '/saves/p' ${SAVED_GAMES[((LINE - 1))]} | cut -f 2 -d '=' | cut -f 1 -d '_') $(sed -n '/save/p' ${SAVED_GAMES[((LINE - 1))]} | cut -f 2 -d ' ' | cut -f 2  -d '_') $(sed -n '/save/p' ${SAVED_GAMES[((LINE - 1))]} | cut -f 2 -d ' ' | cut -f 3 -d '_')"
    echo
    echo -n "    "
    printf "\e[1;32m${SAVED_GAMES[$LINE]##*/} - $(sed -n '/saves/p' ${SAVED_GAMES[$LINE]} | cut -f 2 -d '=' | cut -f 1 -d '_') $(sed -n '/save/p' ${SAVED_GAMES[$LINE]} | cut -f 2 -d ' ' | cut -f 2  -d '_') $(sed -n '/save/p' ${SAVED_GAMES[$LINE]} | cut -f 2 -d ' ' | cut -f 3 -d '_')\e[m"
  else
    echo -n "    "
    printf "\e[1;32m${SAVED_GAMES[$LINE]##*/} - $(sed -n '/saves/p' ${SAVED_GAMES[$LINE]} | cut -f 2 -d '=' | cut -f 1 -d '_') $(sed -n '/save/p' ${SAVED_GAMES[$LINE]} | cut -f 2 -d ' ' | cut -f 2  -d '_') $(sed -n '/save/p' ${SAVED_GAMES[$LINE]} | cut -f 2 -d ' ' | cut -f 3 -d '_')\e[m"
    echo
    echo -n "    "
    echo "${SAVED_GAMES[((LINE + 1))]##*/} -  $(sed -n '/saves/p' ${SAVED_GAMES[((LINE + 1))]} | cut -f 2 -d '=' | cut -f 1 -d '_') $(sed -n '/save/p' ${SAVED_GAMES[((LINE + 1))]} | cut -f 2 -d ' ' | cut -f 2  -d '_') $(sed -n '/save/p' ${SAVED_GAMES[((LINE + 1))]} | cut -f 2 -d ' ' | cut -f 3 -d '_')"
    echo
    echo -n "    "
    echo "${SAVED_GAMES[((LINE + 2))]##*/} -  $(sed -n '/saves/p' ${SAVED_GAMES[((LINE + 2))]} | cut -f 2 -d '=' | cut -f 1 -d '_') $(sed -n '/save/p' ${SAVED_GAMES[((LINE + 2))]} | cut -f 2 -d ' ' | cut -f 2  -d '_') $(sed -n '/save/p' ${SAVED_GAMES[((LINE + 2))]} | cut -f 2 -d ' ' | cut -f 3 -d '_')"
  fi
  echo
  echo
  echo "  Press w to go up, s to go down, "
  echo -n "  d or enter to select, a or b to go back. "
  read -s -n 1 LOAD
  if [[ "${LOAD}" ]]; then
    case "${LOAD}" in
    w|A)
      if [[ ${LINE} -eq 1 ]]; then
        load_game
      else
        LINE=$((LINE - 1))
        load_game
      fi;;
    s|B)
      if [[ $LINE -lt ${#SAVED_GAMES[*]} ]]; then
        LINE=$((LINE + 1))
        load_game
      else
        load_game
      fi;;
    d|C)
      XCORD=$(sed -n '/save/p' ${SAVED_GAMES[$LINE]} | cut -f 3 -d ' ')
      YCORD=$(sed -n '/save/p' ${SAVED_GAMES[$LINE]} | cut -f 4 -d ' ')
      NAME=$(ls -1 $SAVES/ | sed -n "$LINE"p)
      SAVE=$(sed -n '/save/p' ${SAVED_GAMES[$LINE]} | cut -f 2 -d ' ')
      MAP="$(< places/${SAVE}_map)"
      if [[ -f places/${SAVE}_hidden ]]; then
        readarray MAP_HIDDEN < places/${SAVE}_hidden
      fi
      readarray MAP_TERRIAN < places/${SAVE}_terrian
      readarray CHAR_SHEET < ${SAVES}/$NAME
      ${SAVE}_move;;
    a|D)
      main_menu;;
    *)
      load_game;;
    esac
  else
  XCORD=$(sed -n '/save/p' ${SAVED_GAMES[$LINE]} | cut -f 3 -d ' ')
  YCORD=$(sed -n '/save/p' ${SAVED_GAMES[$LINE]} | cut -f 4 -d ' ')
  NAME=$(ls -1 $SAVES/ | sed -n "$LINE"p)
  SAVE=$(sed -n '/save/p' ${SAVED_GAMES[$LINE]} | cut -f 2 -d ' ')
  MAP="$(< places/${SAVE}_map)"
  if [[ -f places/${SAVE}_hidden ]]; then
    readarray MAP_HIDDEN < places/${SAVE}_hidden
  fi
  readarray MAP_TERRIAN < places/${SAVE}_terrian
  readarray CHAR_SHEET < ${SAVES}/$NAME
  ${SAVE}_move
  fi
else
  printf "\033c"
  echo "${SWORD_IMAGE:=$(< images/sword)}"
  echo
  echo
  echo "  You have no saved games or your have chosen the wrong save directory."
  echo -n "      Press enter to return the main menu."
  read -s _
  main_menu
fi
}

function main_menu {
  printf "\033c"
  MENU_OPTION=${MENU_OPTION:=1}
  echo "${SWORD_IMAGE:=$(< images/sword)}"
  echo
  if [[ ${MENU_OPTION} = 1 ]]; then
  printf "                              \e[1;32m1. New Game\e[m\n"
  else
  echo "                              1. New Game"
  fi
  echo
  if [[ ${MENU_OPTION} = 2 ]]; then
  printf "                              \e[1;32m2. Load Game\e[m\n"
  else
  echo "                              2. Load Game"
  fi
  echo
  if [[ ${MENU_OPTION} = 3 ]]; then
  printf "                              \e[1;32m3. Credits\e[m\n"
  else
  echo "                              3. Credits"
  fi
  echo
  if [[ ${MENU_OPTION} = 4 ]]; then
  printf "                              \e[1;32m4. Quit\e[m\n"
  else
  echo "                              4. Quit"
  fi
  echo
  echo
  read -s -n 1 MENU_KEY
  if [[ $MENU_KEY ]]; then
  case $MENU_KEY in
    1)
      new_game;;
    2)
      LINE=1
      load_game;;
    3)
      printf "\033c"
      echo "${CREDITS:=$(< credits)}"
      read -s _;;
    4)
      printf "\033c"
      exit;;
    A|w)
      MENU_OPTION=$(($MENU_OPTION - 1 % 4));;
    B|s)
      MENU_OPTION=$(($MENU_OPTION + 1 % 4));;
      esac
  else
  case $MENU_OPTION in
    1)
      new_game;;
    2)
      LINE=0
      load_game;;
    3)
      printf "\033c"
      echo "${CREDITS:=$(< credits)}"
      read -s _;;
    4)
      printf "\033c"
      exit;;
   esac
  fi
  main_menu
}
start
main_menu
